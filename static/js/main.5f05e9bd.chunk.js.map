{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","getData","e","setState","input","target","value","updateDate","state","updatedDate","alert","diff","Date","days","Math","floor","x","setInterval","hours","minutes","seconds","clearInterval","item","date","items","concat","console","log","className","this","onChange","type","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPA2EeA,E,kDAxEb,aAAe,IAAD,8BACZ,gBASFC,QAAU,SAACC,GACT,EAAKC,SAAS,CAAEC,MAAOF,EAAEG,OAAOC,SAXpB,EAadC,WAAa,WACX,GAA+B,OAA3B,EAAKC,MAAMC,aAA6C,KAArB,EAAKD,MAAMJ,MAChDM,MAAM,wBACD,CACL,IAAIC,EAAO,IAAIC,KAAK,EAAKJ,MAAMJ,OAAS,IAAIQ,KACxCC,EAAOC,KAAKC,MAAMJ,EAAI,OAEtBK,EAAIC,aAAY,WAClB,IAAIN,EAAO,IAAIC,KAAK,EAAKJ,MAAMJ,OAAS,IAAIQ,KACxCC,EAAOC,KAAKC,MAAMJ,EAAI,OACtBO,EAAQJ,KAAKC,MACdJ,EAAI,MAAL,MAEEQ,EAAUL,KAAKC,MAAOJ,EAAI,KAAL,KACrBS,EAAUN,KAAKC,MAAOJ,EAAI,IAAkB,KAEhD,EAAKR,SAAS,CACZM,YAAY,kBAAD,OAAoBI,EAApB,mBAAmCK,EAAnC,mBAAmDC,EAAnD,kBAAoEC,EAApE,UAETT,EAAO,IACTU,cAAcL,GACd,EAAKb,SAAS,CAAEM,YAAa,oBAE9B,KACGa,EAAO,CAAEC,KAAM,EAAKf,MAAMJ,MAAOS,KAAMA,GAC7C,EAAKV,SAAS,CAAEqB,MAAO,EAAKhB,MAAMgB,MAAMC,OAAOH,KAC/CI,QAAQC,IAAI,EAAKnB,MAAMgB,SArCzB,EAAKhB,MAAQ,CACXgB,MAAO,GACPpB,MAAO,GAEPK,YAAa,wBANH,E,0CA4Cd,WACE,OACE,8BACE,sBAAKmB,UAAU,MAAf,UAEE,sBAAKA,UAAU,QAAf,UACE,oBAAIA,UAAU,gBAAd,+BACA,sBACA,qBAAIA,UAAU,gBAAd,cAAiCC,KAAKrB,MAAMC,YAA5C,UAEF,sBAAKmB,UAAU,QAAf,UACE,uBACEtB,MAAOuB,KAAKrB,MAAMJ,MAClB0B,SAAUD,KAAK5B,QACf8B,KAAK,mBAEP,uBACA,wBAAQC,QAASH,KAAKtB,WAAYqB,UAAU,SAA5C,uBAdJ,oB,GAhDUK,aCUHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5f05e9bd.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { Component } from \"react\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      items: [],\n      input: \"\",\n\n      updatedDate: \"select a date & time\",\n    };\n  }\n\n  getData = (e) => {\n    this.setState({ input: e.target.value });\n  };\n  updateDate = () => {\n    if (this.state.updatedDate === null || this.state.input === \"\") {\n      alert(\"enter valid date\");\n    } else {\n      let diff = new Date(this.state.input) - new Date();\n      let days = Math.floor(diff / (1000 * 60 * 60 * 24));\n\n      let x = setInterval(() => {\n        let diff = new Date(this.state.input) - new Date();\n        let days = Math.floor(diff / (1000 * 60 * 60 * 24));\n        let hours = Math.floor(\n          (diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n        );\n        let minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n        let seconds = Math.floor((diff % (1000 * 60)) / 1000);\n\n        this.setState({\n          updatedDate: `Timer ends in: ${days} days : ${hours} hours :${minutes} min : ${seconds} sec`,\n        });\n        if (diff < 0) {\n          clearInterval(x);\n          this.setState({ updatedDate: \"Expired Date\" });\n        }\n      }, 1000);\n      const item = { date: this.state.input, days: days };\n      this.setState({ items: this.state.items.concat(item) });\n      console.log(this.state.items);\n      //    console.log(this.state.updatedDate);\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"App\">\n\n          <div className=\"Timer\">\n            <h1 className=\"card__heading\"> COUNTDOWN TIMER </h1>\n            <p></p>\n            <h3 className=\"card__heading\"> { this.state.updatedDate} </h3>\n          </div>\n          <div className=\"input\">\n            <input\n              value={this.state.input}\n              onChange={this.getData}\n              type=\"datetime-local\"\n            />\n            <br />\n            <button onClick={this.updateDate} className=\"button\">\n              Submit\n            </button>\n\n          </div>        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}